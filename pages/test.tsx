import genspace, { Matrice3D, System } from '../libs/SpaceGenerator'
import { useEffect } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import React, { useRef, useState } from 'react'
import Planet from '@/components/Planet'
import Head from 'next/head'
import { OrbitControls } from '@react-three/drei'
export default function Home() {
  
  const [densityArray, setDensityArray] = useState<(System[] | Matrice3D)[]>()
  const [option, setOption] = useState<string>('galaxyMap')

  const [moveX, setMoveX] = useState(0)
  const [moveY, setMoveY] = useState(0)
  const [moveZ, setMoveZ] = useState(0)

  const goToX = (h : number) => {
    setMoveX(moveX + h)
  }
  const goToY = (h : number) => {
    setMoveY(moveY + h)
  }
  const goToZ = (h : number) => {
    setMoveZ(moveZ + h)
  }

  useEffect(() => {
    let densityArray;
    if (option === 'doubleMap') {
      densityArray = genspace({galaxySize: {x: 30, y: 30, z: 3},position: {x: moveX, y: moveY, z: moveZ}},'galaxyMap');
    } else {
      densityArray = genspace({galaxySize: {x: 30, y: 30, z: 3},position: {x: moveX, y: moveY, z: moveZ}}, option);
    }
    console.log(densityArray);
    setDensityArray(densityArray);
  },[moveX,moveY,moveZ])

  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <button onClick={() => goToX(1)}>Move X+</button>
      <button onClick={() => goToY(1)}>Move Y+</button>
      <button onClick={() => goToZ(1)}>Move Z+</button>
      <button onClick={() => goToX(-1)}>Move X-</button>
      <button onClick={() => goToY(-1)}>Move Y-</button>
      <button onClick={() => goToZ(-1)}>Move Z-</button>
      <Canvas gl={{ antialias: false, stencil: false }} camera={{ position: [30, 0, 0], fov: 80 }}>
        <ambientLight />
        <pointLight position={[10, 10, 10]} />
        <OrbitControls enableZoom={true} autoRotate autoRotateSpeed={0.1} enablePan={false} minPolarAngle={Math.PI / 4} maxPolarAngle={Math.PI / 4} />
        <>
        { option === 'densityMap' ?
          (densityArray?.[1] ?? [])?.map((matrice3D : any, indexX:number) => 
            matrice3D?.map((matrice2D : any, indexY:number) => 
              matrice2D?.map((matrice1D : any, indexZ:number) => {
                const length1 = (densityArray?.[1] ?? []).length
                const length2 = matrice3D.length
                const length3 = matrice2D.length
                return (
                  <Planet position={[indexX - length1/2 + 0.5,indexY - length2/2 + 0.5,indexZ - length3/2 + 0.5]} color={(matrice1D*0xffffff)/50}/>
                )

              }
              )
            )
          ) : 
          option === 'galaxyMap' ?
          (densityArray?.[1] ?? [])?.map((matrice3D : any, indexX:number) => 
          matrice3D?.map((matrice2D : any, indexY:number) => 
            matrice2D?.map((matrice1D : any, indexZ:number) => {
              if (matrice1D.hasSystem) {
                const length1 = (densityArray?.[1] ?? []).length
                const length2 = matrice3D.length
                const length3 = matrice2D.length
                return (
                  <Planet position={[indexX - length1/2 + 0.5,indexY - length2/2 + 0.5,indexZ - length3/2 + 0.5]} color={0xffffff}/>
                )
              }

            }
            )
          )
          ) : 
          option === 'doubleMap' ?
          (densityArray?.[1] ?? [])?.map((matrice3D : any, indexX:number) => 
          matrice3D?.map((matrice2D : any, indexY:number) => 
            matrice2D?.map((matrice1D : any, indexZ:number) => {
                const length1 = (densityArray?.[1] ?? []).length
                const length2 = matrice3D.length
                const length3 = matrice2D.length
                return (
                  <Planet position={[indexX - length1/2 + 0.5,indexY - length2/2 + 0.5,indexZ - length3/2 + 0.5]} color={(matrice1D.value*0xffffff)/50}/>
                )
            }
            )
          )
          ) : null
        }
        </>
      </Canvas>
      { option === 'doubleMap' ?
        <Canvas gl={{ antialias: false, stencil: false }} camera={{ position: [30, 0, 0], fov: 80 }}>
        <ambientLight />
        <pointLight position={[10, 10, 10]} />
        <OrbitControls enableZoom={true} autoRotate autoRotateSpeed={0.1} enablePan={false} minPolarAngle={Math.PI / 4} maxPolarAngle={Math.PI / 4} />
        <>
        { (densityArray?.[1] ?? [])?.map((matrice3D : any, indexX:number) => 
          matrice3D?.map((matrice2D : any, indexY:number) => 
            matrice2D?.map((matrice1D : any, indexZ:number) => {
              if (matrice1D.hasSystem) {
                const length1 = (densityArray?.[1] ?? []).length
                const length2 = matrice3D.length
                const length3 = matrice2D.length
                return <Planet position={[indexX - length1/2 + 0.5,indexY - length2/2 + 0.5,indexZ - length3/2 + 0.5]} color={0xffffff}/>
              }
            }
            )
          )
          )
        }
        </>
        </Canvas> : null
      }
      </main>
    </>
  )
}